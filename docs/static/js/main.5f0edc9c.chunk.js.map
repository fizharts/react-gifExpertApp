{"version":3,"sources":["logo.svg","componentes/AddCategory.jsx","componentes/GifGridItem.jsx","helpers/getGifs.jsx","componentes/GifGrid.jsx","hooks/useFetchGifs.js","componentes/ComponenteUno.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","Categories","type","value","onChange","target","handleInputChange","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","res","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","classNAme","key","ComponenteUno","llave","i","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yGAAAA,EAAOC,QAAU,IAA0B,kC,kICI9BC,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAIZC,mBAAS,IAJG,mBAIzCC,EAJyC,KAI7BC,EAJ6B,KAiBhD,OACG,kBAAC,WAAD,KACC,0BAAMC,SARW,SAACC,GAClBA,EAAEC,iBACFJ,EAAWK,OAAOC,OAAS,EAC3BR,GAAc,SAAAS,GAAU,OAAIP,GAAJ,mBAAmBO,OAAcN,EAAc,MAMvE,4CACMD,EACF,2BAAOQ,KAAK,QAAQC,MAAQT,EAAaU,SAAU,SAAAP,GAAC,OAhBlC,SAAEA,GAAQ,IACxBM,EAAUN,EAAEQ,OAAZF,MACRR,EAAeQ,GAc4CG,CAAkBT,SCbtEU,EAXK,SAAC,GAAwB,EAAtBC,GAAuB,IAAnBC,EAAkB,EAAlBA,MAAQC,EAAU,EAAVA,IAEjC,OACE,yBAAKC,UAAU,2CAEb,yBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,2BAAKA,K,uBCNEK,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACTN,EADS,0FACiFO,UAAUF,GAD3F,gDAEMG,MAAMR,GAFZ,cAENS,EAFM,gBAIUA,EAAIC,OAJd,uBAIJC,EAJI,EAIJA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GACpB,MAAO,CACNhB,GAAIgB,EAAIhB,GACRC,MAAQe,EAAIf,MACZC,IAAMc,EAAIC,OAAOC,iBAAiBhB,QAV3B,kBAeRY,GAfQ,4CAAH,sDC6BLK,EA5BC,SAAC,GAAgB,IAAfZ,EAAc,EAAdA,SAAc,ECCJ,SAACA,GAAc,IAAD,EAEZtB,mBAAS,CAC/B4B,KAAM,GACNO,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAmBtC,OAZAC,qBAAU,WAENjB,EAAQC,GAAUiB,MAAK,SAAAC,GACnBH,EAAS,CACLT,KAAMY,EACNL,SAAS,SAIlB,CAACb,IAGGc,EDlBuBK,CAAanB,GAAjCU,EAFkB,EAEvBJ,KAAcO,EAFS,EAETA,QAErB,OACE,kBAAC,WAAD,KACA,uBAAGO,UAAU,mCAAb,IAAkDpB,GAGlD,yBAAKJ,UAAU,aACbiB,GAAW,uBAAGjB,UAAU,kCAAb,cAGTc,EAAOF,KAAI,SAAAC,GACR,OACI,kBAAC,EAAD,eACCY,IAAKZ,EAAIhB,IACLgB,UEQLa,EAxBO,WAAO,IAAD,EAEU5C,mBAAS,IAFnB,mBAEnBQ,EAFmB,KAEPT,EAFO,KAIxB8C,EAAQ,EAEV,OACC,kBAAC,WAAD,KAEG,kBAAC,EAAD,CAAa9C,cAAeA,IAC5B,6BAEIS,EAAWsB,KAAI,SAACJ,EAAMoB,GAEpB,OADAD,IAEI,kBAAC,EAAD,CAASF,IAAKE,EAAOvB,SAAUI,UCRhCqB,MANf,WACE,OACE,kBAAC,EAAD,OCKgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.5f0edc9c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Fragment } from 'react'\r\nimport { useState } from 'react'\r\nimport { PropTypes} from 'prop-types'\r\n\r\nexport const AddCategory = ( { setCategories } ) => {\r\n\r\n\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const handleInputChange = ( e ) => {\r\n        const { value } = e.target\r\n        setInputValue( value )\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        inputValue.trim().length > 2 ?\r\n        setCategories(Categories=>[ inputValue ,...Categories]): setInputValue('')  \r\n            \r\n    }\r\n    return (\r\n       <Fragment>\r\n        <form onSubmit={ handleSubmit }>\r\n        <h1>Add category</h1>\r\n            { inputValue }\r\n            <input type=\"text \" value={ inputValue } onChange={e=> handleInputChange(e)}/>\r\n        </form>\r\n       </Fragment>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories :  PropTypes.func.isRequired\r\n}\r\n","import React from 'react';\r\n\r\nconst GifGridItem = ({ id, title , url }) => {\r\n\r\n  return (\r\n    <div className=\"card animate__animated animate__fadeInt\">\r\n  \r\n      <img src={url} alt={title}/>\r\n      <p>{ title }</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GifGridItem;\r\n","\r\n\r\nexport const getGifs = async ( category)=> {\r\n        const url = `https://api.giphy.com/v1/gifs/search?api_key=2ndi1LxbyY7O1ZyWxPM64PLZIUasrAFJ&q=${ encodeURI(category) }&limit=25&offset=0&rating=g&lang=en`\r\n           const res = await fetch(url)\r\n           \r\n            const {data} = await res.json()\r\n           \r\n            const gifs = data.map( img => {\r\n               return {\r\n                id: img.id ,\r\n                title : img.title ,\r\n                url : img.images.downsized_medium.url\r\n               }\r\n\r\n            })\r\n\r\n        return gifs;\r\n    }","import React, { Fragment } from 'react';\r\nimport GifGridItem from './GifGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nconst GifGrid = ({category}) => {\r\n\r\n  const {data:images , loading} = useFetchGifs(category)\r\n      \r\n  return (\r\n    <Fragment>\r\n    <p classNAme=\"animate_animated animate_fadeIn\"> { category }\r\n    </p>\r\n  \r\n    <div className=\"card-grid\">\r\n     {loading && <p className=\"animate_animated animate_flash\">Loading...</p>}\r\n       \r\n       { \r\n        images.map(img => {\r\n           return (\r\n               <GifGridItem\r\n                key={img.id}\r\n                {...img}/>\r\n       \r\n           )\r\n       })\r\n      }\r\n    \r\n       </div>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default GifGrid;\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    useEffect(() => {\r\n\r\n        getGifs(category).then(imgs => {\r\n            setState({\r\n                data: imgs,\r\n                loading: false\r\n            })\r\n        })\r\n\r\n    }, [category])\r\n\r\n\r\n    return state\r\n\r\n}","import React, { Fragment, useState } from 'react';\r\nimport { AddCategory } from './AddCategory';\r\nimport GifGrid from './GifGrid';\r\n\r\nconst ComponenteUno = () => {\r\n\r\n  const [Categories, setCategories] = useState([]);\r\n// api key 2ndi1LxbyY7O1ZyWxPM64PLZIUasrAFJ\r\nlet llave = 0\r\n\r\n  return (\r\n   <Fragment>\r\n\r\n      <AddCategory setCategories={setCategories}/>\r\n      <div>\r\n        {\r\n          Categories.map((res , i) =>{\r\n            llave++\r\n            return(\r\n                <GifGrid key={llave} category={res} />\r\n            )\r\n          })\r\n        }\r\n      </div>\r\n   </Fragment>\r\n  )\r\n}\r\n\r\nexport default ComponenteUno;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ComponenteUno from './componentes/ComponenteUno';\n\nfunction App() {\n  return (\n    <ComponenteUno/>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}